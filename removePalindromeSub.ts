// https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/

// Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

// Return the minimum number of steps to make the given string empty.

// A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

// A string is called palindrome if is one that reads the same backward as well as forward.

// --------------------------------------------------------

// I have to count the number of palindromes in the string
// there are only 2 letters, which makes it easier
// actually it makes it too easy, because you can pick and choose which letters in the string will be part of the palindrome, they don't have to be consecutive. Which means the answer will never be more than 2. The function will only test for two edge cases: if the string is empty and if the whole string is one palindrome
// This is a terrible question!

const removePalindromeSub = (s: string): number => {
    if (!s) return 0
    let i = 0
    let j = s.length - 1
    while (i <= j) if (s[i++] !== s[j--]) return 2
    return 1
}

// time O(n/2), space O(1) 

console.log(removePalindromeSub('ababa')) // 1
console.log(removePalindromeSub('abb')) // 2
console.log(removePalindromeSub('baabb')) // 2